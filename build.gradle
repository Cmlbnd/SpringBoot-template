import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'

group = 'com.sample'
version = getVersion()

description = "java-multi-thread"

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    maven { url "http://repo.maven.apache.org/maven2" }
}

checkstyle {
    toolVersion '8.11';
}

jacoco {
    toolVersion = "0.8.2"
}

test {
    useJUnitPlatform()
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

task checkstyle(type: Checkstyle) {
    source 'src'
    include '**/*.java'
    exclude '**/build/**'
    // empty classpath
    classpath = files()
    //Failing the build
    ignoreFailures = false
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.0.2.RELEASE'
    compile(group: 'org.hibernate', name: 'hibernate-core', version: '5.3.7.Final') {
        exclude(module: 'xml-apis')
    }
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.11'
    compile group: 'org.springframework.data', name: 'spring-data-jpa', version: '2.0.7.RELEASE'
    compile(group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.2.17.Final') {
        exclude(module: 'xml-apis')
    }
    compile group: 'org.json', name: 'json', version: '20090211'
    compile(group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.3.0')
    compile(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3') {
        exclude(module: 'commons-logging')
    }

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '2.0.2.RELEASE'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.8.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.8.0'
    compile group: 'org.aspectj', name: 'aspectjweaver', version: '1.8.9'
    compile group: 'com.amazonaws', name: 'amazon-sqs-java-messaging-lib', version: '1.0.4'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-activemq', version: '2.0.2.RELEASE'
    compile group: 'com.amazonaws', name: 'aws-java-sdk', version: '1.11.432'
    compile group: 'com.h2database', name: 'h2', version: '1.4.197'

    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.0.2.RELEASE'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.23.4'
    testCompile("org.junit.platform:junit-platform-runner:1.3.2")
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testCompile 'org.junit.platform:junit-platform-suite-api:1.3.2'
    testCompile 'org.junit.platform:junit-platform-engine:1.3.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

def getVersion() {
    Properties releaseProperties = new Properties()
    releaseProperties.load(new FileInputStream('release.properties'))
    return releaseProperties.version
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}